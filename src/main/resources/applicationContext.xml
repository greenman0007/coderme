<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
	    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd     
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd   
        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

	<!-- 激活spring的注解. -->
	<context:annotation-config />
	<context:component-scan base-package="*" />
	<bean id="springContextUtil" class="com.coderme.core.util.SpringContextUtil" />

	<bean id="md5Encoder" class="com.coderme.core.util.encoder.MD5Encoder" />
	<!-- 
	<bean id="freeMarkerViewResolver"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver"
		p:viewClass="org.springframework.web.servlet.view.freemarker.FreeMarkerView"
		p:contentType="text/html;charset=utf-8" p:suffix=".ftl"
		p:exposeSessionAttributes="true" p:exposeRequestAttributes="true"
		p:exposeSpringMacroHelpers="true" />
    -->
    <!-- 用自定义的类 替代原生FreemarkerConfigurer类
        http://skyfar666.iteye.com/blog/2001891
        -->  
	<!--  <bean id="freemarkerConfigurer"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"> -->
	<bean id="freemarkerConfigurer"
		class="com.coderme.core.config.ShiroTagFreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/ftl" />
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">0</prop><!--检查模板是否更新  秒 -->  
				<prop key="output_encoding">UTF-8</prop>
				<prop key="defaultEncoding">UTF-8</prop>
				<prop key="locale">zh_CN</prop>
				<prop key="date_format">yyyy-MM-dd</prop>
				<prop key="time_format">HH:mm:ss</prop>
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
				<prop key="number_format">0.################</prop>
				<prop key="auto_import">common/spring.ftl as spring</prop>
			</props>
		</property>
		<property name="freemarkerVariables">
			<map>
			</map>
		</property>
	</bean>

	<!-- 属性配置 -->

    <bean id="propertyConfigurer"
       class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
       p:location="classpath:jdbc.properties" />
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >  
        <!-- Connection Info -->
        <property name="driverClassName" value="${jdbc.driver}" />  
        <property name="url" value="${jdbc.url}" />  
        <property name="username" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}"></property>  
  
        <!-- Connection Pooling Info   
        <property name="maxIdle" value="${dbcp.maxIdle}" />  
        <property name="maxActive" value="${dbcp.maxActive}" />  
        <property name="defaultAutoCommit" value="false" />  
        <property name="timeBetweenEvictionRunsMillis" value="3600000" />  
        <property name="minEvictableIdleTimeMillis" value="3600000" />  -->
    </bean>  
  
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">  
        <property name="dataSource">  
            <ref bean="dataSource" />  
        </property>  
    </bean>  
    
    <bean id="articleDAO" class="com.coderme.dao.ArticleDAO">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>
	<bean id="userDAO" class="com.coderme.dao.UserDAO">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>
	
	<!-- Mybatis's sqlSessionFactory config -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource"></property>  
        <property name="configLocation" value="classpath:mybatis-config.xml"/>          
    </bean>
    <!-- Mybatis scan  mappers and let them be autowired -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">         
        <property name="basePackage" value="com.coderme.mapper" />  
    </bean>
    <!-- 定义事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	
	<!-- 声明式事务：注解方式 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>messages</value>
			</list>
		</property>
	</bean>
	
	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->  
    <bean id="myRealm" class="com.coderme.core.util.MyRealm"/>  
  
    <!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->  
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <property name="realm" ref="myRealm"/>  
    </bean>
    
    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
        <!-- Shiro的核心安全接口,这个属性是必须的 -->  
        <property name="securityManager" ref="securityManager"/>  
        <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->  
        <property name="loginUrl" value="/index.html"/>  
        <!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->  
        <!-- <property name="successUrl" value="/system/main"/> -->  
        <!-- 用户访问未对其授权的资源时,所显示的连接 -->  
        <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->  
        <property name="unauthorizedUrl" value="/login"/>  
        <!-- Shiro连接约束配置,即过滤链的定义 -->  
        <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->  
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
        
        <!-- /mydemo/login=anon  
                /mydemo/getVerifyCodeImage=anon  -->
        <property name="filterChainDefinitions">  
            <value>  
                /rest/**=anon
                /contact=anon
                /css**=anon
                /js**=anon
                /ftl**=authc
                /welcome=authc
                /user/info**=anon  
                /admin/listUser**=authc,perms[admin:manage]  
            </value>  
        </property>  
    </bean>  
  
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
  
    <!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->  
    <!-- 配置以下两个bean即可实现此功能 -->  
    <!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run -->  
    <!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->  
    <!--   
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>  
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager"/>  
    </bean> -->
    
    <!-- 
    <import resource="classpath:applicationContext-jms.xml"/> -->
</beans>  